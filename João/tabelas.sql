CREATE TABLE FLORICULTURA (
    COD_LOJA SERIAL PRIMARY KEY,
    NOME VARCHAR(30) NOT NULL,
    ENDERECO_LOJA VARCHAR(50) NOT NULL,
    STATUS_LOJA VARCHAR(50) DEFAULT 'ATIVO',
    CRIADO_EM TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    UPDATED_AT TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE FORNECEDOR (
    COD_FORNECEDOR SERIAL PRIMARY KEY,
    NOME VARCHAR(30) NOT NULL,
    CONTATO_FORNECEDOR VARCHAR(50) NOT NULL,
    CRIADO_EM TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    UPDATED_AT TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE PRODUTO (
    COD_PROD SERIAL PRIMARY KEY,
    NOME VARCHAR(30) NOT NULL,
    VALOR_PROD NUMERIC(10,2) NOT NULL,
    CRIADO_EM TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    UPDATED_AT TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE ESTOQUE (
    COD_ESTOQUE SERIAL PRIMARY KEY,
    COD_PROD INT NOT NULL,
    QUANTIDADE_EST INT NOT NULL,
    CRIADO_EM TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    UPDATED_AT TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (COD_PROD) REFERENCES PRODUTO(COD_PROD) ON DELETE CASCADE
);

CREATE INDEX idx_estoque_prod ON ESTOQUE(COD_PROD);

CREATE TABLE FUNCIONARIO (
    COD_FUNC SERIAL PRIMARY KEY,
    NOME VARCHAR(50) NOT NULL,
    SALARIO_BASE NUMERIC(10,2),
    COMISSAO NUMERIC(4,2),
    COD_LOJA INT NOT NULL,
    TELEFONE VARCHAR(30) NOT NULL,
    STATUS_FUNC VARCHAR(50) DEFAULT 'ATIVO',
    CRIADO_EM TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    UPDATED_AT TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (COD_LOJA) REFERENCES FLORICULTURA(COD_LOJA) ON DELETE CASCADE
);

CREATE TABLE CLIENTE (
    COD_CLI SERIAL PRIMARY KEY,
    NOME VARCHAR(50) NOT NULL,
    TELEFONE_CLI VARCHAR(30) NOT NULL,
    CRIADO_EM TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    UPDATED_AT TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE VENDA (
    COD_VENDA SERIAL PRIMARY KEY,
    COD_CLI INT NOT NULL,
    COD_FUNC INT NOT NULL,
    DATA_VENDA DATE NOT NULL,
    CRIADO_EM TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    UPDATED_AT TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (COD_CLI) REFERENCES CLIENTE(COD_CLI) ON DELETE CASCADE,
    FOREIGN KEY (COD_FUNC) REFERENCES FUNCIONARIO(COD_FUNC) ON DELETE CASCADE
);

CREATE INDEX idx_venda_cliente ON VENDA(COD_CLI);
CREATE INDEX idx_venda_funcionario ON VENDA(COD_FUNC);

CREATE TABLE COMPRA (
    COD_COMPRA SERIAL PRIMARY KEY,
    COD_ESTOQUE INT NOT NULL,
    COD_FUNC INT NOT NULL,
    COD_FORNECEDOR INT NOT NULL,
    DATA_COMPRA DATE NOT NULL,
    CRIADO_EM TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    UPDATED_AT TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (COD_ESTOQUE) REFERENCES ESTOQUE(COD_ESTOQUE) ON DELETE CASCADE,
    FOREIGN KEY (COD_FUNC) REFERENCES FUNCIONARIO(COD_FUNC) ON DELETE CASCADE,
    FOREIGN KEY (COD_FORNECEDOR) REFERENCES FORNECEDOR(COD_FORNECEDOR) ON DELETE CASCADE
);

CREATE TABLE ITEM_VENDA (
    COD_ITEM_VENDA SERIAL PRIMARY KEY,
    COD_VENDA INT NOT NULL,
    COD_ESTOQUE INT NOT NULL,
    QTD_ITENS_VENDA INT NOT NULL,
    CRIADO_EM TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    UPDATED_AT TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (COD_VENDA) REFERENCES VENDA(COD_VENDA) ON DELETE CASCADE,
    FOREIGN KEY (COD_ESTOQUE) REFERENCES ESTOQUE(COD_ESTOQUE) ON DELETE CASCADE
);

CREATE TABLE ITEM_COMPRA (
    COD_ITEM_COMPRA SERIAL PRIMARY KEY,
    COD_COMPRA INT NOT NULL,
    COD_ESTOQUE INT NOT NULL,
    QTD_ITENS_COMPRA INT NOT NULL,
    CRIADO_EM TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    UPDATED_AT TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (COD_COMPRA) REFERENCES COMPRA(COD_COMPRA) ON DELETE CASCADE,
    FOREIGN KEY (COD_ESTOQUE) REFERENCES ESTOQUE(COD_ESTOQUE) ON DELETE CASCADE
);

-- Select Genetico
CREATE OR REPLACE FUNCTION SELECT_GENERICO(
    NOME_TABELA TEXT
) RETURNS SETOF RECORD AS $$
DECLARE
    sql TEXT;
BEGIN
    sql := FORMAT('SELECT * FROM %I', NOME_TABELA);
    RETURN QUERY EXECUTE sql;
END;
$$ LANGUAGE plpgsql;

-- Funções
CREATE OR REPLACE FUNCTION atualiza_updated_at()
RETURNS TRIGGER AS $$
BEGIN
   NEW.updated_at = CURRENT_TIMESTAMP;
   RETURN NEW;
END;
$$ LANGUAGE plpgsql;

CREATE OR REPLACE FUNCTION criacao_sem_alteracao()
RETURNS TRIGGER AS $$
BEGIN
    IF NEW.criado_em <> OLD.criado_em THEN
        RAISE EXCEPTION 'O campo criado_em não pode ser alterado.';
    END IF;

    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

-- Criar triggers para todas as tabelas para que o updated seja atualizado toda vez que haja alteração em determinada tabela
DO $$ 
DECLARE 
    nome_tabela TEXT;
	
BEGIN
    FOR nome_tabela IN
        SELECT table_name 
        FROM information_schema.columns 
        WHERE column_name = 'updated_at'
        AND table_schema = 'public'
		AND table_name != 'auditoria'
    LOOP
        EXECUTE format('
            CREATE TRIGGER trg_%I_updated_at
            BEFORE UPDATE ON %I
            FOR EACH ROW
            EXECUTE FUNCTION atualiza_updated_at();',
            nome_tabela, nome_tabela
        );
    END LOOP;

END $$;

-- Criar trigger de não alteração de created_at
DO $$ 
DECLARE 
    nome_tabela TEXT;
	
BEGIN
    FOR nome_tabela IN
        SELECT table_name 
        FROM information_schema.columns 
        WHERE column_name = 'updated_at'
        AND table_schema = 'public'
    LOOP
        EXECUTE format('
            CREATE TRIGGER trg_%I_criacao_sem_alteracao
			BEFORE UPDATE ON %I
			FOR EACH ROW
			EXECUTE FUNCTION criacao_sem_alteracao();',
            nome_tabela, nome_tabela
        );
    END LOOP;

END $$;

-- codigo para dropar todas as tabelas caso necessario
DO $$
DECLARE
    r RECORD;
BEGIN
    FOR r IN
        SELECT tablename
        FROM pg_tables
        WHERE schemaname = 'public'
    LOOP
        EXECUTE format('DROP TABLE IF EXISTS public.%I CASCADE;', r.tablename);
    END LOOP;
END $$;