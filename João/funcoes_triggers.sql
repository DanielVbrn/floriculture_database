CREATE OR REPLACE FUNCTION verificar_nome_produto()
RETURNS TRIGGER AS $$
BEGIN
    IF EXISTS (SELECT 1 FROM PRODUTO WHERE NOME_PROD = NEW.NOME_PROD) THEN
        RAISE EXCEPTION 'ERRO: O NOME DO PRODUTO JÁ EXISTE NA TABELA PRODUTO.';
	END IF;
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

CREATE OR REPLACE FUNCTION verificar_e_cadastrar_cliente()
RETURNS TRIGGER AS $$
-- DECLARE (isso comentado é referente a tabela de LOG que tu (Daniel) tinha colocado, gostei da ideia vamos conversar sobre)
    -- resultado VARCHAR;
BEGIN
    IF EXISTS (SELECT 1 FROM CLIENTE WHERE COD_CLI = NEW.COD_CLI) THEN
        RAISE EXCEPTION 'ERRO: CLIENTE JÁ CADASTRADO.';
    ELSE
        INSERT INTO CLIENTE (COD_CLI, NOME_CLI, DATA_NASC, TELEFONE)
        VALUES (NEW.COD_CLI, NEW.NOME_CLI, NEW.DATA_NASC, NEW.TELEFONE);
        
        -- INSERT INTO LOG_CLIENTE (RESULTADO) VALUES ('SUCESSO: CLIENTE CADASTRADO COM SUCESSO.');
    END IF;

    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

CREATE OR REPLACE FUNCTION verificar_e_cadastrar_loja()
RETURNS TRIGGER AS $$
BEGIN
    IF EXISTS (SELECT 1 FROM FLORICULTURA WHERE COD_LOJA = NEW.COD_LOJA) THEN
        RAISE EXCEPTION 'ERRO: FLORICULTURA JÁ CADASTRADA NA REDE DE LOJAS.';
    ELSE
        INSERT INTO FLORICULTURA (COD_LOJA, NOME_LOJA, ENDERECO_LOJA)
        VALUES (NEW.COD_LOJA, NEW.NOME_LOJA, NEW.ENDERECO_LOJA);
    END IF;

    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

CREATE OR REPLACE FUNCTION verificar_e_cadastrar_funcionario()
RETURNS TRIGGER AS $$
BEGIN
	IF NEW.COD_LOJA IS NULL THEN
        RAISE EXCEPTION 'ERRO: O FUNCIONÁRIO DEVE ESTAR LIGADO A ALGUMA FLORICULTURA.';
    END IF;

    RETURN NEW;
END;
$$ LANGUAGE plpgsql;


-- TRIGGER CADASTRAR FORNECEDOR
CREATE OR REPLACE FUNCTION verificar_e_cadastrar_fornecedor()
RETURNS TRIGGER AS $$
BEGIN
    IF EXISTS (SELECT NOME_FORNECEDOR FROM FORNECEDOR WHERE NOME_FORNECEDOR = NEW.NOME_FORNECEDOR) THEN
        RAISE EXCEPTION 'ERRO: FORNECEDOR JÁ CADASTRADO NO BANCO DE DADOS.';
    END IF;

    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

CREATE OR REPLACE FUNCTION verificar_e_cadastrar_estoque()
RETURNS TRIGGER AS $$
BEGIN
    IF EXISTS (SELECT 1 FROM ESTOQUE WHERE COD_ESTOQUE = NEW.COD_ESTOQUE) THEN
        RAISE EXCEPTION 'ERRO: ESTOQUE JÁ CADASTRADO NO BANCO DE DADOS.';
    ELSE
        INSERT INTO ESTOQUE (COD_ESTOQUE, QUANTIDADE_EST, COD_PROD, COD_LOJA)
        VALUES (NEW.COD_ESTOQUE, NEW.QUANTIDADE_EST, NEW.COD_PROD, NEW.COD_LOJA);
    END IF;

    RETURN NEW;
END;
$$ LANGUAGE plpgsql;


--CADASTRAR ITEM_VENDA
CREATE OR REPLACE FUNCTION verificar_cadastro_item_venda()
RETURNS TRIGGER AS $$
DECLARE
    valor_produto NUMERIC;
    valor_total_item NUMERIC;
    quantidade_estoque NUMERIC;
BEGIN
    -- Obtém o valor do produto e a quantidade em estoque
    SELECT p.VALOR_PROD, e.QUANTIDADE_EST INTO valor_produto, quantidade_estoque
    FROM PRODUTO p
    JOIN ESTOQUE e ON p.COD_PROD = e.COD_PROD
    WHERE e.COD_ESTOQUE = NEW.COD_ESTOQUE;

    -- Verifica se a quantidade desejada está disponível no estoque
    IF quantidade_estoque < NEW.QTD_ITENS_VENDA THEN
        RAISE EXCEPTION 'Quantidade insuficiente em estoque.';
    END IF;

    -- Calcula o valor total do item vendido
    valor_total_item := valor_produto * NEW.QTD_ITENS_VENDA;

    -- Atualiza o valor do item na tabela ITEM_VENDA
    NEW.VALOR_ITEM_VENDA := valor_total_item;

    -- Decrementa a quantidade no estoque
    UPDATE ESTOQUE
    SET QUANTIDADE_EST = QUANTIDADE_EST - NEW.QTD_ITENS_VENDA
    WHERE COD_ESTOQUE = NEW.COD_ESTOQUE;

    RETURN NEW;
END;
$$ LANGUAGE plpgsql;


-- Trigger associada à tabela ITEM_VENDA
CREATE TRIGGER trg_verificar_cadastro_item_venda
BEFORE INSERT OR UPDATE ON ITEM_VENDA
FOR EACH ROW
EXECUTE FUNCTION verificar_cadastro_item_venda();




SELECT * FROM ITEM_VENDA
SELECT * FROM VENDA
SELECT * FROM ESTOQUE
SELECT * FROM CLIENTE
SELECT * FROM PRODUTO
	
-- Testando a função CADASTRAR_VENDA
SELECT CADASTRAR_VENDA('venda', 6 , 2, '2024-09-16');
SELECT CADASTRAR_ITEM_VENDA(4, 3, 2)


