CREATE OR REPLACE FUNCTION verificar_nome_produto()
RETURNS TRIGGER AS $$
BEGIN
    IF EXISTS (SELECT 1 FROM PRODUTO WHERE NOME_PROD = NEW.NOME_PROD) THEN
        RAISE EXCEPTION 'ERRO: O NOME DO PRODUTO JÁ EXISTE NA TABELA PRODUTO.';
	ELSE
		INSERT INTO PRODUTO (COD_PROD, NOME_PROD)
		VALUES (NEW.COD_PROD, NEW.NOME_PROD);
	END IF;
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

CREATE OR REPLACE FUNCTION verificar_e_cadastrar_cliente()
RETURNS TRIGGER AS $$
-- DECLARE (isso comentado é referente a tabela de LOG que tu (Daniel) tinha colocado, gostei da ideia vamos conversar sobre)
    -- resultado VARCHAR;
BEGIN
    IF EXISTS (SELECT 1 FROM CLIENTE WHERE COD_CLI = NEW.COD_CLI) THEN
        RAISE EXCEPTION 'ERRO: CLIENTE JÁ CADASTRADO.';
    ELSE
        INSERT INTO CLIENTE (COD_CLI, NOME_CLI, DATA_NASC, TELEFONE)
        VALUES (NEW.COD_CLI, NEW.NOME_CLI, NEW.DATA_NASC, NEW.TELEFONE);
        
        -- INSERT INTO LOG_CLIENTE (RESULTADO) VALUES ('SUCESSO: CLIENTE CADASTRADO COM SUCESSO.');
    END IF;

    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

CREATE OR REPLACE FUNCTION verificar_e_cadastrar_loja()
RETURNS TRIGGER AS $$
BEGIN
    IF EXISTS (SELECT 1 FROM FLORICULTURA WHERE COD_LOJA = NEW.COD_LOJA) THEN
        RAISE EXCEPTION 'ERRO: FLORICULTURA JÁ CADASTRADA NA REDE DE LOJAS.';
    ELSE
        INSERT INTO FLORICULTURA (COD_LOJA, NOME_LOJA, ENDERECO_LOJA)
        VALUES (NEW.COD_LOJA, NEW.NOME_LOJA, NEW.ENDERECO_LOJA);
    END IF;

    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

CREATE OR REPLACE FUNCTION verificar_e_cadastrar_funcionario()
RETURNS TRIGGER AS $$
BEGIN
    IF EXISTS (SELECT 1 FROM FUNCIONARIO WHERE COD_FUNC = NEW.COD_FUNC) THEN
        RAISE EXCEPTION 'ERRO: FUNCIONÁRIO JÁ CADASTRADO NO BANCO DE DADOS.';
    ELSIF NEW.COD_LOJA IS NULL THEN
        RAISE EXCEPTION 'ERRO: O FUNCIONÁRIO DEVE ESTAR LIGADO A ALGUMA FLORICULTURA.';
    ELSE
        INSERT INTO FUNCIONARIO (COD_FUNC, NOME_FUNC, COD_LOJA, TELEFONE)
        VALUES (NEW.COD_FUNC, NEW.NOME_FUNC, NEW.COD_LOJA, NEW.TELEFONE);
    END IF;

    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

CREATE OR REPLACE FUNCTION verificar_e_cadastrar_fornecedor()
RETURNS TRIGGER AS $$
BEGIN
    IF EXISTS (SELECT 1 FROM FORNECEDOR WHERE COD_FORNECEDOR = NEW.COD_FORNECEDOR) THEN
        RAISE EXCEPTION 'ERRO: FORNECEDOR JÁ CADASTRADO NO BANCO DE DADOS.';
    ELSE
        INSERT INTO FORNECEDOR (COD_FORNECEDOR, NOME_FORNECEDOR, CONTATO_FORNECEDOR)
        VALUES (NEW.COD_FORNECEDOR, NEW.NOME_FORNECEDOR, NEW.CONTATO_FORNECEDOR);
    END IF;

    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

CREATE OR REPLACE FUNCTION verificar_e_cadastrar_estoque()
RETURNS TRIGGER AS $$
BEGIN
    IF EXISTS (SELECT 1 FROM ESTOQUE WHERE COD_ESTOQUE = NEW.COD_ESTOQUE) THEN
        RAISE EXCEPTION 'ERRO: ESTOQUE JÁ CADASTRADO NO BANCO DE DADOS.';
    ELSE
        INSERT INTO ESTOQUE (COD_ESTOQUE, QUANTIDADE_EST, COD_PROD, COD_LOJA)
        VALUES (NEW.COD_ESTOQUE, NEW.QUANTIDADE_EST, NEW.COD_PROD, NEW.COD_LOJA);
    END IF;

    RETURN NEW;
END;
$$ LANGUAGE plpgsql;