-- CLIENTE
CREATE OR REPLACE FUNCTION REMOVER_CLIENTE(C_COD_CLI INT)
RETURNS VARCHAR AS $$
DECLARE
    RESULT_MESSAGE VARCHAR;
BEGIN
    IF EXISTS (SELECT 1 FROM CLIENTE WHERE COD_CLI = C_COD_CLI) THEN
        IF EXISTS (SELECT 1 FROM VENDA WHERE COD_CLI = C_COD_CLI) THEN
            RESULT_MESSAGE := 'ERRO: CLIENTE POSSUI VENDAS ASSOCIADAS E NÃO PODE SER REMOVIDO.';
        ELSE
            DELETE FROM CLIENTE WHERE COD_CLI = C_COD_CLI;
            RESULT_MESSAGE := 'SUCESSO: CLIENTE REMOVIDO COM SUCESSO.';
        END IF;
    ELSE
        RESULT_MESSAGE := 'ERRO: CLIENTE NÃO ENCONTRADO.';
    END IF;
    RETURN RESULT_MESSAGE;
END;
$$ LANGUAGE plpgsql;



-- FUNCIONÁRIO

CREATE OR REPLACE FUNCTION REMOVER_FUNCIONARIO(F_COD_FUNC INT)
RETURNS VARCHAR AS $$
DECLARE
    RESULT_MESSAGE VARCHAR;
BEGIN
    IF EXISTS (SELECT 1 FROM FUNCIONARIO WHERE COD_FUNC = F_COD_FUNC) THEN
        IF EXISTS (SELECT 1 FROM VENDA WHERE COD_FUNC = F_COD_FUNC) THEN
            RESULT_MESSAGE := 'ERRO: FUNCIONÁRIO POSSUI VENDAS ASSOCIADAS E NÃO PODE SER REMOVIDO.';
        ELSIF EXISTS (SELECT 1 FROM COMPRA WHERE COD_FUNC = F_COD_FUNC) THEN
            RESULT_MESSAGE := 'ERRO: FUNCIONÁRIO POSSUI COMPRAS ASSOCIADAS E NÃO PODE SER REMOVIDO.';
        ELSE
            DELETE FROM FUNCIONARIO WHERE COD_FUNC = F_COD_FUNC;
            RESULT_MESSAGE := 'SUCESSO: FUNCIONÁRIO REMOVIDO COM SUCESSO.';
        END IF;
    ELSE
        RESULT_MESSAGE := 'ERRO: FUNCIONÁRIO NÃO ENCONTRADO.';
    END IF;
    RETURN RESULT_MESSAGE;
END;
$$ LANGUAGE plpgsql;



-- PRODUTO
CREATE OR REPLACE FUNCTION REMOVER_PRODUTO(P_COD_PROD INT)
RETURNS VARCHAR AS $$
DECLARE
    RESULT_MESSAGE VARCHAR;
BEGIN
    IF EXISTS (SELECT 1 FROM PRODUTO WHERE COD_PROD = P_COD_PROD) THEN
        IF EXISTS (SELECT 1 FROM ITEM_VENDA WHERE COD_ESTOQUE IN (SELECT COD_ESTOQUE FROM ESTOQUE WHERE COD_PROD = P_COD_PROD)) THEN
            RESULT_MESSAGE := 'ERRO: PRODUTO POSSUI ITENS DE VENDA ASSOCIADOS E NÃO PODE SER REMOVIDO.';
        ELSIF EXISTS (SELECT 1 FROM ESTOQUE WHERE COD_PROD = P_COD_PROD) THEN
            RESULT_MESSAGE := 'ERRO: PRODUTO POSSUI ESTOQUE ASSOCIADO E NÃO PODE SER REMOVIDO.';
        ELSE
            DELETE FROM PRODUTO WHERE COD_PROD = P_COD_PROD;
            RESULT_MESSAGE := 'SUCESSO: PRODUTO REMOVIDO COM SUCESSO.';
        END IF;
    ELSE
        RESULT_MESSAGE := 'ERRO: PRODUTO NÃO ENCONTRADO.';
    END IF;
    RETURN RESULT_MESSAGE;
END;
$$ LANGUAGE plpgsql;


-- FLORICULTURA

CREATE OR REPLACE FUNCTION REMOVER_FLORICULTURA(F_COD_LOJA INT)
RETURNS VARCHAR AS $$
DECLARE
    RESULT_MESSAGE VARCHAR;
BEGIN
    IF EXISTS (SELECT 1 FROM FLORICULTURA WHERE COD_LOJA = F_COD_LOJA) THEN
        DELETE FROM FUNCIONARIO WHERE COD_LOJA = F_COD_LOJA;

        DELETE FROM FLORICULTURA WHERE COD_LOJA = F_COD_LOJA;

        RESULT_MESSAGE := 'SUCESSO: FLORICULTURA REMOVIDA COM SUCESSO.';
    ELSE
        RESULT_MESSAGE := 'ERRO: FLORICULTURA NÃO ENCONTRADA.';
    END IF;

    RETURN RESULT_MESSAGE;
END;
$$ LANGUAGE plpgsql;


-- FORNECEDOR

CREATE OR REPLACE FUNCTION REMOVER_FORNECEDOR(F_COD_FORNECEDOR INT)
RETURNS VARCHAR AS $$
DECLARE
    RESULT_MESSAGE VARCHAR;
BEGIN
    IF EXISTS (SELECT 1 FROM FORNECEDOR WHERE COD_FORNECEDOR = F_COD_FORNECEDOR) THEN
        IF EXISTS (SELECT 1 FROM COMPRA WHERE COD_FORNECEDOR = F_COD_FORNECEDOR) THEN
            RESULT_MESSAGE := 'ERRO: FORNECEDOR POSSUI COMPRAS ASSOCIADAS E NÃO PODE SER REMOVIDO.';
        ELSE
            DELETE FROM FORNECEDOR WHERE COD_FORNECEDOR = F_COD_FORNECEDOR;
            RESULT_MESSAGE := 'SUCESSO: FORNECEDOR REMOVIDO COM SUCESSO.';
        END IF;
    ELSE
        RESULT_MESSAGE := 'ERRO: FORNECEDOR NÃO ENCONTRADO.';
    END IF;
    RETURN RESULT_MESSAGE;
END;
$$ LANGUAGE plpgsql;


-- FLORICULTURA

CREATE OR REPLACE FUNCTION REMOVER_FLORICULTURA (FL_COD_LOJA INT)
RETURNS VARCHAR AS $$
DECLARE
	RESULT_MESSAGE VARCHAR;
BEGIN
	IF EXISTS (SELECT 1 FROM FLORICULTURA WHERE COD_LOJA = FL_COD_LOJA) THEN
		DELETE FROM FLORICULTURA WHERE COD_LOJA = FL_COD_LOJA;
	ELSE
		RESULT_MESSAGE := 'ERRO: FLORICULTURA NÃO EXISTE NO BANCO DE DADOS.';
	END IF;

	RETURN RESULT_MESSAGE;
END;
$$ LANGUAGE plpgsql;

-- ESTOQUE 

CREATE OR REPLACE FUNCTION REMOVER_ESTOQUE(E_COD_ESTOQUE INT)
RETURNS VARCHAR AS $$
DECLARE
    RESULT_MESSAGE VARCHAR;
BEGIN
    IF EXISTS (SELECT 1 FROM ESTOQUE WHERE COD_ESTOQUE = E_COD_ESTOQUE) THEN
        IF EXISTS (SELECT 1 FROM ITEM_VENDA WHERE COD_ESTOQUE = E_COD_ESTOQUE) THEN
            RESULT_MESSAGE := 'ERRO: ESTOQUE POSSUI ITENS DE VENDA ASSOCIADOS E NÃO PODE SER REMOVIDO.';
        ELSIF EXISTS (SELECT 1 FROM ITEM_COMPRA WHERE COD_ESTOQUE = E_COD_ESTOQUE) THEN
            RESULT_MESSAGE := 'ERRO: ESTOQUE POSSUI ITENS DE COMPRA ASSOCIADOS E NÃO PODE SER REMOVIDO.';
        ELSE
            DELETE FROM ESTOQUE WHERE COD_ESTOQUE = E_COD_ESTOQUE;
            RESULT_MESSAGE := 'SUCESSO: ESTOQUE REMOVIDO COM SUCESSO.';
        END IF;
    ELSE
        RESULT_MESSAGE := 'ERRO: ESTOQUE NÃO ENCONTRADO.';
    END IF;
    RETURN RESULT_MESSAGE;
END;
$$ LANGUAGE plpgsql;


-- ITEM COMPRA

CREATE OR REPLACE FUNCTION REMOVER_ITEM_COMPRA(I_COD_ITEM_COMPRA INT)
RETURNS VARCHAR AS $$
DECLARE
    RESULT_MESSAGE VARCHAR;
BEGIN
    -- Verificar se o item de compra existe
    IF EXISTS (SELECT 1 FROM ITEM_COMPRA WHERE COD_ITEM_COMPRA = I_COD_ITEM_COMPRA) THEN
        -- Remover o item de compra
        DELETE FROM ITEM_COMPRA WHERE COD_ITEM_COMPRA = I_COD_ITEM_COMPRA;

        RESULT_MESSAGE := 'SUCESSO: ITEM DE COMPRA REMOVIDO COM SUCESSO.';
    ELSE
        RESULT_MESSAGE := 'ERRO: ITEM DE COMPRA NÃO ENCONTRADO.';
    END IF;

    RETURN RESULT_MESSAGE;
END;
$$ LANGUAGE plpgsql;

-- ITEM VENDA

CREATE OR REPLACE FUNCTION REMOVER_ITEM_VENDA(I_COD_ITEM_VENDA INT)
RETURNS VARCHAR AS $$
DECLARE
    RESULT_MESSAGE VARCHAR;
BEGIN
    IF EXISTS (SELECT 1 FROM ITEM_VENDA WHERE COD_ITEM_VENDA = I_COD_ITEM_VENDA) THEN
        DELETE FROM ITEM_VENDA WHERE COD_ITEM_VENDA = I_COD_ITEM_VENDA;

        RESULT_MESSAGE := 'SUCESSO: ITEM DE VENDA REMOVIDO COM SUCESSO.';
    ELSE
        RESULT_MESSAGE := 'ERRO: ITEM DE VENDA NÃO ENCONTRADO.';
    END IF;

    RETURN RESULT_MESSAGE;
END;
$$ LANGUAGE plpgsql;
