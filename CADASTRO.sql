------- FUNÇÕES DE CADASTRO

-- PRODUTOS

CREATE OR REPLACE FUNCTION CADASTRAR_PRODUTO(
	P_TABELA VARCHAR,
    P_COD_PROD INT,
    P_NOME_PROD VARCHAR(30)
) RETURNS VARCHAR AS $$
DECLARE
    PRODUTO_EXISTE INT;
    RESULT_MESSAGE VARCHAR;
BEGIN
	IF P_TABELA = 'PRODUTO' THEN 
	    SELECT COUNT(*)
	    INTO PRODUTO_EXISTE
	    FROM PRODUTO
	    WHERE NOME_PROD = P_NOME_PROD;
	
	    IF PRODUTO_EXISTE > 0 THEN
	        RESULT_MESSAGE := 'ERRO: O NOME DO PRODUTO JÁ EXISTE NA TABELA PRODUTO.';
	    ELSE
	        INSERT INTO PRODUTO (COD_PROD, NOME_PROD)
	        VALUES (P_COD_PROD, P_NOME_PROD);
	        
	        RESULT_MESSAGE := 'SUCESSO: PRODUTO CADASTRADO COM SUCESSO.';
	    END IF;
	ELSE
		RESULT_MESSAGE:= 'ERRO: TABELA NÃO PODE SER CADASTRADA.'
	END IF;

	RETURN RESULT_MESSAGE;
END;
$$ LANGUAGE plpgsql;

    RETURN RESULT_MESSAGE;
END;

-- CLIENTES

CREATE OR REPLACE FUNCTION CADASTRAR_CLIENTE (
	C_TABELA VARCHAR,
	C_COD_CLI INT,
	C_NOME_CLI VARCHAR(50),
	C_DATA_NASC DATE,
	C_TELEFONE VARCHAR(30)
) RETURNS VARCHAR AS $$ 
DECLARE
	CLIENTE_EXISTE INT;
	RESULT_MESSAGE VARCHAR;
BEGIN
	IF C_TABELA = 'CLIENTE' THEN 
	    SELECT COUNT(*)
	    INTO CLIENTE_EXISTE
	    FROM CLIENTE
	    WHERE COD_CLI = C_COD_CLI;
	
	    IF CLIENTE_EXISTE > 0 THEN
	        RESULT_MESSAGE := 'ERRO: CLIENTE JÁ CADASTRADO.';
	    ELSE
	        INSERT INTO CLIENTE (COD_CLI, NOME_CLI, DATA_NASC, TELEFONE)
	        VALUES (C_COD_CLI, C_NOME_CLI, C_DATA_NASC, C_TELEFONE);
	        
	        RESULT_MESSAGE := 'SUCESSO: CLIENTE CADASTRADO COM SUCESSO.';
	    END IF;
	ELSE
		RESULT_MESSAGE:= 'ERRO: TABELA NÃO PODE SER CADASTRADA.';
	END IF;

	RETURN RESULT_MESSAGE;
END;
$$ LANGUAGE plpgsql;

CREATE TABLE LOG_CLIENTE (
    ID SERIAL PRIMARY KEY,
    RESULTADO VARCHAR(255),
    DATA TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

------- TRIGGER TESTE PARA CADASTRAR CLIENTE

CREATE OR REPLACE FUNCTION trigger_cadastrar_cliente() RETURNS TRIGGER AS $$
DECLARE
    resultado VARCHAR;
BEGIN
    resultado := CADASTRAR_CLIENTE('CLIENTE', NEW.COD_CLI, NEW.NOME_CLI, NEW.DATA_NASC, NEW.TELEFONE);
    INSERT INTO LOG_CLIENTE (RESULTADO) VALUES (resultado);
    IF resultado LIKE 'SUCESSO%' THEN
        RETURN NEW;
    ELSE
        RETURN NULL; 
    END IF;
END;
$$ LANGUAGE plpgsql;


CREATE TRIGGER trg_after_insert_cliente
BEFORE INSERT ON CLIENTE
FOR EACH ROW
EXECUTE FUNCTION trigger_cadastrar_cliente();


-- REDE DE FLORICULTURAS

CREATE OR REPLACE FUNCTION CADASTRAR_LOJA(
	L_TABELA VARCHAR,
	L_COD_LOJA INT,
	L_NOME_LOJA VARCHAR(30),
	L_ENDERECO_LOJA VARCHAR(50)
) RETURNS VARCHAR AS $$
DECLARE 
	FLORICULTURA_EXISTE INT;
	RESULT_MESSAGE VARCHAR;
BEGIN
	IF C_TABELA = 'FLORICULTURA' THEN 
	    SELECT COUNT(*)
	    INTO FLORICULTURA_EXISTE
	    FROM FLORICULTURA
	    WHERE COD_LOJA = L_COD_LOJA;
	
	    IF FLORICULTURA_EXISTE > 0 THEN
	        RESULT_MESSAGE := 'ERRO: FLORICULTURA JÁ CADASTRADO NA REDE DE LOJAS.';
	    ELSE
	        INSERT INTO FLORICULTURA (COD_LOJA, NOME_LOJA, ENDERECO_LOJA)
	        VALUES (L_COD_LOJA, L_NOME_LOJA, L_ENDERECO_LOJA);
	        
	        RESULT_MESSAGE := 'SUCESSO: FLORICULTURA CADASTRADA COM SUCESSO NA REDE DE LOJAS.';
	    END IF;
	ELSE
		RESULT_MESSAGE:= 'ERRO: TABELA NÃO PODE SER CADASTRADA.';
	END IF;

	RETURN RESULT_MESSAGE;
END;
$$ LANGUAGE plpgsql;	


	

-- FUNCIONARIOS

CREATE OR REPLACE FUNCTION CADASTRAR_FUNCIONARIO (
	FUNC_TABELA VARCHAR,
	F_COD_FUNC INT,
	F_NOME_FUNC VARCHAR(30),
	F_COD_LOJA INT,
	F_TELEFONE VARCHAR(30)
) RETURNS VARCHAR AS $$
DECLARE 
	FUNCIONARIO_EXISTE INT;
	RESULT_MESSAGE VARCHAR;
BEGIN
	IF FUNC_TABELA = 'FUNCIONARIO'THEN
		SELECT COUNT(*)
		INTO FUNCIONARIO_EXISTE
		FROM FUNCIONARIO
		WHERE COD_FUNC = F_COD_FUNC;
		IF FUNCIONARIO_EXISTE > 0 THEN
			RESULT_MESSAGE := 'ERRO: FUNCIONÁRIO JÁ CADASTRADO NO BANCO DE DADOS.';
		ELSIF F_COD_LOJA IS NULL THEN
			RESULT_MESSAGE:= 'ERRO: O FUNCIONÁRIO DEVE ESTAR LIGADO A ALGUMA FLORICULTURA';
		ELSE
			INSERT INTO FUNCIONARIO ( COD_FUNC, NOME_FUNC, COD_LOJA, TELEFONE)
			VALUES(F_COD_FUNC , F_NOME_FUNC , F_COD_LOJA , F_TELEFONE );
			RESULT_MESSAGE := 'SUCESSO: FUNCIONÁRIO CADASTRADO COM SUCESSO.';
		END IF;
	ELSE
		RESULT_MESSAGE:= 'ERRO: TABELA NÃO PODE SER CADASTRADA.';
	END IF;
	
	RETURN RESULT_MESSAGE;
END;
$$ LANGUAGE plpgsql;	


-- FORNECEDOR

CREATE OR REPLACE FUNCTION CADASTRAR_FORNECEDOR (
	F_TABELA VARCHAR,
	F_COD_FORNEC INT,
	F_NOME_FORNEC VARCHAR(50),
	F_CONTATO_FORNEC VARCHAR(30)
) RETURNS VARCHAR AS $$
DECLARE 
	FORNECEDOR_EXISTE INT;
	RESULT_MESSAGE VARCHAR;
BEGIN
	IF F_TABELA = 'FORNECEDOR'THEN
		SELECT COUNT(*)
		INTO FORNECEDOR_EXISTE
		FROM FORNECEDOR
		WHERE COD_FORNECEDOR = F_COD_FORNEC;
		IF FORNECEDOR_EXISTE > 0 THEN
			RESULT_MESSAGE := 'ERRO: FORNECEDOR JÁ CADASTRADO NO BANCO DE DADOS.';
		ELSE
			INSERT INTO FORNECEDOR ( COD_FORNECEDOR, NOME_FORNECEDOR, CONTATO_FORNECEDOR)
			VALUES(F_COD_FORNEC , F_NOME_FORNEC , F_CONTATO_FORNEC );
			RESULT_MESSAGE := 'SUCESSO: FORNECEDOR CADASTRADO COM SUCESSO.';
		END IF;
	ELSE
		RESULT_MESSAGE:= 'ERRO: TABELA NÃO PODE SER CADASTRADA.';
	END IF;
	
	RETURN RESULT_MESSAGE;
END;
$$ LANGUAGE plpgsql;


-- ESTOQUE

CREATE OR REPLACE FUNCTION CADASTRAR_ESTOQUE (
	E_TABELA VARCHAR,
	E_COD_ESTOQUE INT,
	E_QTD_ESTOQUE INT,
	E_COD_PROD INT,
	E_COD_LOJA INT
) RETURNS VARCHAR AS $$
DECLARE 
	ESTOQUE_EXISTE INT;
	RESULT_MESSAGE VARCHAR;
BEGIN
	IF F_TABELA = 'ESTOQUE'THEN
		SELECT COUNT(*)
		INTO ESTOQUE_EXISTE
		FROM ESTOQUE
		WHERE COD_ESTOQUE = E_COD_ESTOQUE;
		IF ESTOQUE_EXISTE > 0 THEN
			RESULT_MESSAGE := 'ERRO: ESTOQUE JÁ CADASTRADO NO BANCO DE DADOS.';
		ELSE
			INSERT INTO ESTOQUE ( COD_ESTOQUE, QUANTIDADE_EST, COD_PROD, COD_LOJA)
			VALUES(E_COD_ESTOQUE , E_QTD_ESTOQUE , E_COD_PROD, E_COD_LOJA );
			RESULT_MESSAGE := 'SUCESSO: ESTOQUE CADASTRADO COM SUCESSO.';
		END IF;
	ELSE
		RESULT_MESSAGE:= 'ERRO: TABELA NÃO PODE SER CADASTRADA.';
	END IF;
	
	RETURN RESULT_MESSAGE;
END;
$$ LANGUAGE plpgsql;

-- VENDAS

CREATE OR REPLACE FUNCTION CADASTRAR_VENDA (
	V_TABELA VARCHAR,
	V_COD_VENDA 
)



